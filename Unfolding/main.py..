import pygame
import sys
import random

# 初始化pygame
pygame.init()

# 设置窗口
WINDOW_WIDTH = 800
WINDOW_HEIGHT = 600
screen = pygame.display.set_mode((WINDOW_WIDTH, WINDOW_HEIGHT))
pygame.display.set_caption("易经学习游戏")

# 颜色定义
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
GREEN = (0, 255, 0)
RED = (255, 0, 0)
BLUE = (0, 0, 255)

# 字体
font = pygame.font.Font(None, 36)
small_font = pygame.font.Font(None, 24)

# 易经问题库
questions = [
    {
        "question": "易经中的'乾'卦代表什么？",
        "options": ["天", "地", "水", "火"],
        "answer": 0,
        "explanation": "乾卦代表天，是易经六十四卦中的第一卦，象征刚健、创造和领导。"
    },
    {
        "question": "易经中的'坤'卦代表什么？",
        "options": ["天", "地", "水", "火"],
        "answer": 1,
        "explanation": "坤卦代表地，是易经六十四卦中的第二卦，象征柔顺、包容和养育。"
    },
    {
        "question": "易经中的'太极'代表什么？",
        "options": ["阴阳的统一", "太阳", "月亮", "星星"],
        "answer": 0,
        "explanation": "太极代表阴阳的统一，是宇宙万物的本源，体现了对立统一的哲学思想。"
    }
]

class Game:
    def __init__(self):
        self.score = 0
        self.current_question = None
        self.show_explanation = False
        self.explanation = ""
        self.load_new_question()

    def load_new_question(self):
        self.current_question = random.choice(questions)
        self.show_explanation = False

    def check_answer(self, answer_index):
        if answer_index == self.current_question["answer"]:
            self.score += 10
            self.explanation = "回答正确！" + self.current_question["explanation"]
        else:
            self.explanation = "回答错误。正确答案是：" + self.current_question["explanation"]
        self.show_explanation = True

    def draw(self):
        screen.fill(WHITE)
        
        # 绘制分数
        score_text = font.render(f"得分: {self.score}", True, BLACK)
        screen.blit(score_text, (20, 20))

        if self.current_question:
            # 绘制问题
            question_text = font.render(self.current_question["question"], True, BLACK)
            screen.blit(question_text, (WINDOW_WIDTH//2 - question_text.get_width()//2, 100))

            # 绘制选项
            for i, option in enumerate(self.current_question["options"]):
                option_text = font.render(f"{i+1}. {option}", True, BLUE)
                screen.blit(option_text, (WINDOW_WIDTH//2 - option_text.get_width()//2, 200 + i*50))

            # 绘制解释
            if self.show_explanation:
                explanation_text = small_font.render(self.explanation, True, BLACK)
                screen.blit(explanation_text, (WINDOW_WIDTH//2 - explanation_text.get_width()//2, 400))

                # 绘制继续按钮
                continue_text = font.render("按空格键继续", True, GREEN)
                screen.blit(continue_text, (WINDOW_WIDTH//2 - continue_text.get_width()//2, 450))

    def handle_event(self, event):
        if event.type == pygame.KEYDOWN:
            if not self.show_explanation:
                if event.key == pygame.K_1:
                    self.check_answer(0)
                elif event.key == pygame.K_2:
                    self.check_answer(1)
                elif event.key == pygame.K_3:
                    self.check_answer(2)
                elif event.key == pygame.K_4:
                    self.check_answer(3)
            elif event.key == pygame.K_SPACE:
                self.load_new_question()

def main():
    game = Game()
    clock = pygame.time.Clock()

    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            game.handle_event(event)

        game.draw()
        pygame.display.flip()
        clock.tick(60)

if __name__ == "__main__":
    main() 